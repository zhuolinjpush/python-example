==========二分查找(数组有序)============
def handle(key, mylist):
    low = 0
    high = len(mylist) - 1
    while low <= high:
        mid = low + (high - low) / 2
        if (key < mylist[mid]): 
            high = mid
        elif (key > mylist[mid]):
            low = mid
        else:
            return mid
    return -1

mylist = [1,5,14,25,34,46,67,89,120]
print handle(5, mylist)
===========选择排序================
def choice1(mylist):
    length = len(mylist)
    for i in range(0,length):
        j=i+1
        min = i
        for j in range(j,length):
            if(mylist[min]>mylist[j]): min=j
        tmp = mylist[i]
        mylist[i]=mylist[min]
        mylist[min]=tmp
    return mylist

mylist=[23,5,67,98,45,33,120,24,49]
print choice1(mylist)
===========插入排序===============
def sort(mylist):
    n = len(mylist)
    for i in range(1,n):
        j=i
        while (j>0 and mylist[j]<mylist[j-1]):
            tmp = mylist[j]
            mylist[j]=mylist[j-1]
            mylist[j-1]=tmp
            j=j-1
        print mylist
    return mylist

mylist=[23,5,67,34,56,28,9,230,46]
print sort(mylist)
==========希尔排序=============
希尔排序比插入排序和选择排序要快得多，并且数组越大，优势越大
def xsort(mylist):
    N = len(mylist)
    print N
    h = 1
    while h < N/3:
        h=3*h+1
    while h>=1:
        for i in range(h,N):
            j=i
            while (j>=h and mylist[j]<mylist[j-h]):
                tmp = mylist[j-h]
                mylist[j-h]=mylist[j]
                mylist[j]=tmp
                j=j-h
            print i , mylist
        print mylist
        h=h/3
    return mylist

mylist=[23,5,67,34,56,28,9,230,46,33,56,98,20,10,204,39,53]
print xsort(mylist)
===========二分查找及遍历======
class BinarySearchTree(object):
def __init__(self,key):
self.key=key
self.left=None
self.right=None
def find(self,x):
if x==self.key:
return self
elif x<self.key and self.left:
return self.left.find(x)
elif x>self.key and self.right:
return self.right.find(x)
else:
return None
def findMin(self):
if self.left:
return self.left.findMin()
else:
return self
def findMax(self):
        tree=self
if tree:
while tree.right:
                tree=tree.right
return tree
def insert(self,x):
if x<self.key:
if self.left:
self.left.insert(x)
else:
                tree=BinarySearchTree(x)
self.left=tree
elif x>self.key:
if self.right:
self.right.insert(x)
else:
                tree=BinarySearchTree(x)
self.right=tree
def delete(self,x):
if self.find(x):
if x<self.key:
self.left=self.left.delete(x)
return self
elif x>self.key:
self.right=self.right.delete(x)
return self
elif self.left and self.right:
                key=self.right.findMin().key
self.key=key
self.right=self.right.delete(key)
return self
else:
if self.left:
return self.left
else:
return self.right
else:
return self
def midloop(self,sortlist):
if self==None:
return
        if self.left:
self.left.midloop(sortlist)
        sortlist.append(self.key)
if self.right:
self.right.midloop(sortlist)

mylist=[23,5,67,34,56,28,9,230,46,33,56,98,20,10,204,39,53]
tree = BinarySearchTree(mylist[0])
for i in mylist[1:]:
    tree.insert(i)
sortlist = []
tree.midloop(sortlist)
print sortlist
print tree.find(56).key
